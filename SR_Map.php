<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

/**
 * Description of SR_Map
 * This class provides google maps version 3 API integration with codeigniter.
 * @author Hardik Dangar
 */
class SR_Map {

    /**
     * Variable description
     * baseurl - is the main url to send request to google maps api.
     * sensor - useful if you are using mobile application and you want to get gps data using mobile sensor
     * totalmarkers - used to track markers in the map.
     * instance - it's used for avoiding collision when multiple maps are there in page.
     * defaultmap - gives flexibility to users that they don't need to specify marker map for only one map.
     * options  - is used to generate map
     * icons - map icons that you want to use in project.
     * adjustmarkers - adjusts map zoom level based on markers dynamic adding.
     */
    private $baseurl = 'http://maps.google.com/maps/api/js?';
    private $sensor = 'false';
    private $totalmarkers = 0;
    private $instance = false;
    private $defaultmap = '';
    private $adjustmarkers = false;
    private $sidebar = false;
    private $options = array(
        'div' => 'mydiv',
        'lat' => '24.7211',
        'lng' => '70.12',
        'zoom' => '6',
        'maptype' => 'google.maps.MapTypeId.ROADMAP',
        'adjustmarkers' => 'false'
    );
    private $icons = array(
        
        'job'    =>  array('icon' => 'http://maps.google.com/mapfiles/arrow.png',
            'shadow' => 'http://maps.google.com/mapfiles/arrowshadow.png'),
        
        'people' =>  array('icon' => 'http://labs.google.com/ridefinder/images/mm_20_red.png',
            'shadow' => 'http://labs.google.com/ridefinder/images/mm_20_shadow.png'),
        
        'company' => array('icon' => 'http://labs.google.com/ridefinder/images/mm_20_gray.png',
            'shadow' => 'http://labs.google.com/ridefinder/images/mm_20_shadow.png'),
    );

    /**
     * constructor is used to define map url. in future if any changes occurs you can change it here.
     * or any upgrades you want in your maps.
     */
    function __construct() {
        $this->baseurl = $this->baseurl . 'sensor=' . $this->sensor;
        
        $this->ci = &get_instance();
        $mapiconpath = $this->ci->config->item('comman_url').'images/taskicons/maps/';
        $this->icons = array(
        
        'job'    =>  array('icon' => $mapiconpath.'job_location.png',
            'shadow' => $mapiconpath.'job_location_shadow.png'),
            
        'job_active' =>  array('icon' => $mapiconpath.'job_location_active.png',
            'shadow' => $mapiconpath.'job_location_active_shadow.png'),
        
        'people' =>  array('icon' => $mapiconpath.'indivisual_provider.png',
            'shadow' => $mapiconpath.'indivisual_provider_shadow.png'),
        
        'company' => array('icon' => $mapiconpath.'company_provider.png',
            'shadow' => $mapiconpath.'company_provider_shadow.png'),
        );
        
        
    }

    /**
     * This function is the core of maps library.\n
     * First argument accepts array of configuration options of map.
     * i.e array('div' => 'map_canvas', 'lat' => '40.7142691', 'lng' => '-74.0059729')
     * this array will set all options for google map.
     * second argument accepts marker array. refer addmarkers function below.
     */
    function generate($source, $markers=array()) {

        $this->options = array_merge($this->options, $source);
        $this->defaultmap = $this->options['div'];
        $this->sidebar = $this->options['sidebar'];





        $response = "\n";
        $response .= "<!-- output generated by google maps library START  -->";
        $response .= "\n";

        if (!$this->instance) {
            $response .='<script type="text/javascript" src="' . $this->baseurl . '"></script>';
            $this->instance = true;
        }
        $response .= "\n";
        $response .= '<script type="text/javascript">';
        $response .= "\n";

        $response .= 'var icons = JSON.parse(' . json_encode(json_encode($this->icons)) . ');';

        $response .= 'var ' . $this->options['div'] . ';';
        $response .= 'var markers = [];';

        if ($this->options['adjustmarkers'] == true) {
            $response .= 'var bounds = new google.maps.LatLngBounds();';
            $response .= "\n";
        }

        if ($this->sidebar != 'false') {
            $response .= "\n";
            $response .= ' var sidebar = document.getElementById(\'' . $this->sidebar . '\'); ';
            $response .= "\n";
            $response .= ' sidebar.innerHTML = ""; ';
            $response .= "\n";
        }



        $response .= "\n";
        $response .= "\n";

        $response .='function initialize(){
        var myLatlng = new google.maps.LatLng(' . $this->options['lat'] . ',' . $this->options['lng'] . ');
        var myOptions = {
          zoom: ' . $this->options['zoom'] . ',
          center: myLatlng,
          mapTypeId: ' . $this->options['maptype'] . '
        }

        ' . $this->options['div'] . ' = new google.maps.Map(document.getElementById("' . $this->options['div'] . '"), myOptions);';

        if ($this->options['adjustmarkers'] == true) {
            $response .= 'bounds.extend(myLatlng);';
            $response .= "\n";
        }

        $response .= "\n";
        $response .= "\t" . $this->addmarkers($markers);
        $response .= "\n";
        $response .= "}";
        $response .= "\n";
        $response .= 'initialize();';
        $response .= "\n";

        if ($this->sidebar != 'false') {

            $response.='function createSidebarEntry(marker, content) {';

            $response.= 'var div = document.createElement(\'div\');';
            $response.= 'div.innerHTML = content;';
            $response.= 'div.className = "entry";';
            $response.= 'div.style.cursor = \'pointer\';';
            $response.= 'div.style.marginBottom = \'5px\';';



            $response.= '$(div).click(function() {';
            $response.= 'google.maps.event.trigger(marker, \'click\');';
            $response.= '});';



            $response.= 'return div;';
            $response.= '}';
            $response .= "\n";
        }


        $response .= "\n";

        $response .= 'function clearLocations() {';
        $response .= 'for (var i = 0; i < markers.length; i++) {';
        $response .= "\n";
        $response .= 'markers[i].setMap(null)';
        $response .= "\n";
        $response .= '}';
        $response .= "\n";
        $response .= 'markers.length = 0;';
        $response .= '}';
        $response .= "\n";
        $response .= '</script>';
        $response .= "\n";
        $response .= "<!-- output generated by google maps library END  -->";
        $response .= "\n";
        $response .= "\n";
        return $response;
    }

    /**
     * this function is used to add markers to map. all it requires is markers array.
     * Note : if you have only one map in the page you don't need to give map option.
     * it will fetch it from class property defaultmap directly.
      $markers = array(
      'marker1' => array('lat'=>'56.8848','lng'=>'14.7730','map'=>'map','html'=>'test1'),
      'marker2' => array('lat'=>'56.8012','lng'=>'14.7012','map'=>'map','html'=>'test2'),
      );
     */
    function addmarkers($markers) {

        $map = $this->defaultmap;



        if (is_array($markers) && count($markers) > 0) {
            $str = "\t";
            $str .= 'clearLocations();';
            $str .= '';

            if ($this->sidebar != 'false') {
                $str .= 'sidebar.innerHTML = "";';
            }
            
            foreach ($markers as $value) {
                $marker = 'marker';

                $this->totalmarkers = $this->totalmarkers + 1;
                $markername = $marker . '_' . $this->totalmarkers;

                $str .= ' var ' . $markername . ' = new google.maps.Marker({';
                $str .= "\n";
                $str .= 'position: new google.maps.LatLng(' . $value['lat'] . ',' . $value['lng'] . '),';
                $str .= "\n";

                if (isset($value['map'])) {
                    $map = $value['map'];
                }

                $str .= 'map: ' . $map . ',';
                if (isset($value['icon'])) {
                    $str .= 'icon: "' . $this->icons[$value['icon']]['icon'] . '",';
                    
                }

                $str = rtrim($str, ',');
                $str .= "\n";

                $str .= '});';
                $str .= "\n";

                $str .= 'markers.push(' . $markername . ');';
                $str .= "\n";


                if (isset($value['html'])) {

                    $str.= 'var infowindow_' . $this->totalmarkers . ' = new google.maps.InfoWindow({';
                    $str .= "\n";
                    $str.= 'content: ' . json_encode($value['html']);
                    $str .= "\n";
                    $str.= '});';
                    $str .= "\n";
                    $str .='google.maps.event.addListener(' . $markername . ', \'click\', function() {';
                    $str .= "\n";
                    $str .='infowindow_' . $this->totalmarkers . '.open(' . $map . ', ' . $markername . ');';
                    $str .= "\n";
                    $str .='});';
                }
                
                if ($this->sidebar != 'false') {
                    $id = $this->sidebar;
                    
                    if( isset($value['sidebarhtml']) && $value['sidebarhtml'] != '' ){
                    
                        $str .= 'sidebarEntry = createSidebarEntry(' . $markername . ',' . json_encode($value['sidebarhtml']) . ');';
                        $str .= 'sidebar.appendChild(sidebarEntry);';
                    
                    }
                }

                if ($this->options['adjustmarkers'] == true) { 
                    $str .= 'bounds.extend(new google.maps.LatLng(' . $value['lat'] . ',' . $value['lng'] . '));';
                    $str .= "\n";
                }

                $str .= "\n";
                
            } 
            
            if ($this->options['adjustmarkers'] == true) {
                $str .= $map . '.fitBounds(bounds);';
                $str .= "\n";
            }
            return $str;
        } else {
            return '';
        }
    }

    /**
     * this function is used to set icons that you want in your project.
     * seicons method accepts array of icons as input.
     * i.e.
     *      $icons = array(
      'restaurant'=>
      array('icon'=>'http://labs.google.com/ridefinder/images/mm_20_green.png',
      'shadow'=>'http://labs.google.com/ridefinder/images/mm_20_shadow.png'),
      'bar'=>
      array('icon'=>'http://labs.google.com/ridefinder/images/mm_20_blue.png',
      'shadow'=>'http://labs.google.com/ridefinder/images/mm_20_shadow.png'),

      );
     */
    function seticons($source) {
        $this->icons = array_merge($this->icons, $source);
    }

    /*
     * 
     */

    function noresults() {
        echo 'sidebar.innerHTML = "<div class=entry>No results</div>";';
    }

    

}